<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- Spring-dao其实就是配置整合mybatis过程 -->

    <!-- 1.获得数据库相关参数properties的属性 -->
    <!--classpath的路径为src/main/resources（因为它是资源目录）-->
    <!--由于需要加密解密，所以定义的是bean而不是直接为place-holder-->
    <bean class="com.kindol.o2o.util.EncryptPropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <!--value为对应的文件，后面连接数据库会从这里取值，然后会经过本bean对应的类进行解密
                    由于在web.xml中的servlet配置了init-param，所以这里的文件配饰是共享的-->
                <value>classpath:jdbc.properties</value>
                <value>classpath:redis.properties</value>
            </list>
        </property>
        <property name="fileEncoding" value="UTF-8"/>
    </bean>

    <!-- 2.数据库连接池 ComboPooledDataSource为连接池，下面需要为连接池配置属性
        连接池的意义在于提前建立跟数据库的连接，所以需要配置好数据库连接的基本内容：连接组件、url、账号和密码等-->
    <!--id为bean的唯一标志，后面需要跟上class表示此bean对应的类，bean其实就是一个组件，但是是一个已经配置好的组件，可以直接拿来用
        而不同于类，类是还需要进行配置的-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!-- 配置连接池属性：连接组件、url、账号、密码 -->
        <!-- driverClass是必须的，需要表明使用什么组件连接 -->
        <property name="driverClass" value="${jdbc.driver}" />
        <property name="jdbcUrl" value="${jdbc.url}" />
        <property name="user" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />

        <!-- c3p0连接池的私有属性，下面的其实跟线程池是一个道理 -->
        <property name="maxPoolSize" value="30" />
        <property name="minPoolSize" value="10" />
        <!-- 关闭连接后不自动commit -->
        <property name="autoCommitOnClose" value="false" />
        <!-- 获取连接超时时间 -->
        <property name="checkoutTimeout" value="10000" />
        <!-- 当获取连接失败重试次数 -->
        <property name="acquireRetryAttempts" value="2" />
    </bean>

    <!-- 3.配置SqlSessionFactory对象，工厂类，将连接池注入到此对象中，负责创建该数据库连接池
        每一次进行数据库索引都需要有一个sqlSession从factory中产生 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource" />
        <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
        <property name="configLocation" value="classpath:mybatis-config.xml" />
        <!-- 扫描entity包 使用别名，将其与数据库对接起来 -->
        <property name="typeAliasesPackage" value="com.kindol.o2o.entity" />
        <!-- 扫描sql配置文件:mapper需要的xml文件，需要创建跟实体类一一对应的mapper文件 -->
        <property name="mapperLocations" value="classpath:mapper/*.xml" />
    </bean>

    <!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中
        对于Spring，要实现IOC，首先需要指明在哪里注入，而我们的DAO层就是在此，且跟mybatis相关，所以需要在此配置好最终的DAO层，包括注入SqlSessionFactory-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注入sqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <!-- 给出需要扫描Dao接口包 -->
        <property name="basePackage" value="com.kindol.o2o.dao" />
    </bean>
</beans>